rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true;
    }

    // User profiles - using email as document ID for Paystack integration
    match /users/{userId} {
      // Allow read/write for both UID and email-based access
      // This is needed because Paystack webhook uses email as identifier
      allow read, write: if isOwner(userId) || 
        (isAuthenticated() && request.auth.token.email == resource.data.email) ||
        isAdmin();
      // Allow creation of new profiles during signup
      allow create: if isAuthenticated();
    }
    
    // Payments collection for Paystack transactions
    match /payments/{paymentId} {
      // Allow users to read their own payment records
      allow read: if isAuthenticated() && 
        (resource.data.userEmail == request.auth.token.email || isAdmin());
      // Allow Paystack webhook to create payment records (handled by server)
      allow create: if false; // Only through server
      allow update, delete: if isAdmin();
    }
    
    // Subscription records
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
        (resource.data.userEmail == request.auth.token.email || isAdmin());
      // Only allow server-side subscription updates
      allow write: if false;
    }
    
    // Default deny for everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}